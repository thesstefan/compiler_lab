%option noyywrap
%{
	#include <stdio.h>
    #include "y.tab.h"
	int lines = 0;
%}

NZERODIGIT [1-9]
DIGIT      [0-9]
LETTER     [A-Za-z]
CHARACTER  ['](LETTER|DIGIT)[']
STRING     ["][A-Za-z0-9_]+["]
IDENTIFIER [A-Za-z]|[_A-Za-z][_A-Za-z0-9]+

%%

{DIGIT}|{NZERODIGIT}{DIGIT}*|"-"{NZERODIGIT}{DIGIT}*					{printf("%s\n", yytext); return INTEGER;}
{CHARACTER}										{printf("%s\n", yytext); return CHAR;}
{STRING}										{printf("%s\n", yytext); return STR;}
"let"											{printf("%s\n", yytext); return LET;}
"int"											{printf("%s\n", yytext); return INT;}
"string"										{printf("%s\n", yytext); return STRING;}
"char"											{printf("%s\n", yytext); return CHAR;}
"vec"											{printf("%s\n", yytext); return VEC;}
"input"											{printf("%s\n", yytext); return INPUT;}
"output"										{printf("%s\n", yytext); return OUTPUT;}
"if"											{printf("%s\n", yytext); return IF;}
"else"											{printf("%s\n", yytext); return ELSE;}
"while"											{printf("%s\n", yytext); return WHILE;}
"return"										{printf("%s\n", yytext); return RETURN;}
"("											{printf("%s\n", yytext); return OPEN_ROUND_BRACKET;}
")"											{printf("%s\n", yytext); return CLOSED_ROUND_BRACKET;}
"["											{printf("%s\n", yytext); return OPEN_SQUARE_BRACKET;}
"]"											{printf("%s\n", yytext); return CLOSED_SQUARE_BRACKET;}
"{"											{printf("%s\n", yytext); return OPEN_BRACE;}
"}"											{printf("%s\n", yytext); return CLOSED_BRACE;}
";"											{printf("%s\n", yytext); return SEMICOLON;}
":"											{printf("%s\n", yytext); return COLON;}
","											{printf("%s\n", yytext); return COMMA;}							
"+"											{printf("%s\n", yytext); return PLUS;}
"-"											{printf("%s\n", yytext); return MINUS;}
"*"											{printf("%s\n", yytext); return MULTIPLY;}
"/"											{printf("%s\n", yytext); return DIVIDE;}
"%"											{printf("%s\n", yytext); return MOD;}
"<="											{printf("%s\n", yytext); return RELATION_OP;}
"=="											{printf("%s\n", yytext); return RELATION_OP;}
">"											{printf("%s\n", yytext); return RELATION_OP;}
">="											{printf("%s\n", yytext); return RELATION_OP;}
"!="											{printf("%s\n", yytext); return RELATION_OP;}
"="											{printf("%s\n", yytext); return ASSIGNMENT_OP;}
"<"											{printf("%s\n", yytext); return RELATION_OP;}
"!"											{printf("%s\n", yytext); return RELATION_OP;}
"and"											{printf("%s\n", yytext); return RELATION_OP;}
"or"											{printf("%s\n", yytext); return RELATION_OP;}			
{IDENTIFIER}										{printf("%s\n", yytext); return ID;}

[\n]+											{++lines;}
[ \t]+											{}

[0-9]{IDENTIFIER}									{ printf("Illegal identifier at line %d: %s\n", lines, yytext); return -1; }
.											{ printf("Illegal symbol at line %d: %s\n", lines, yytext); return -1; }

%%
